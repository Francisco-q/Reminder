# Generated by Django 4.2.7 on 2025-08-12 06:24

import apps.monitoring.sqlite_fields
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='APIEndpointTest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('test_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Test ID')),
                ('endpoint_url', models.CharField(help_text='Full URL of the endpoint to test', max_length=500, verbose_name='Endpoint URL')),
                ('http_method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('PATCH', 'PATCH'), ('DELETE', 'DELETE')], default='GET', max_length=10, verbose_name='HTTP Method')),
                ('test_payload', apps.monitoring.sqlite_fields.SQLiteJSONField(default=dict, verbose_name='Test payload')),
                ('expected_status_code', models.PositiveIntegerField(default=200, verbose_name='Expected status code')),
                ('expected_response_keys', apps.monitoring.sqlite_fields.SQLiteArrayField(default=list, help_text='Keys that should be present in response')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('passed', 'Passed'), ('failed', 'Failed'), ('skipped', 'Skipped')], default='pending', max_length=20, verbose_name='Status')),
                ('executed_at', models.DateTimeField(blank=True, null=True, verbose_name='Executed at')),
                ('actual_status_code', models.PositiveIntegerField(blank=True, null=True, verbose_name='Actual status code')),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True, verbose_name='Response time (ms)')),
                ('response_data', apps.monitoring.sqlite_fields.SQLiteJSONField(default=dict, verbose_name='Response data')),
                ('error_message', models.TextField(blank=True, verbose_name='Error message')),
            ],
            options={
                'verbose_name': 'API Endpoint Test',
                'verbose_name_plural': 'API Endpoint Tests',
                'db_table': 'monitoring_api_endpoint_test',
                'ordering': ['-executed_at'],
            },
        ),
        migrations.CreateModel(
            name='FeatureSync',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('sync_id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for this sync operation', unique=True, verbose_name='Sync ID')),
                ('sync_type', models.CharField(choices=[('full', 'Full sync'), ('incremental', 'Incremental sync'), ('validation', 'Validation only')], default='full', max_length=20, verbose_name='Sync type')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Started at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed at')),
                ('features_found', apps.monitoring.sqlite_fields.SQLiteJSONField(default=dict, verbose_name='Features found')),
                ('sync_results', apps.monitoring.sqlite_fields.SQLiteJSONField(default=dict, verbose_name='Sync results')),
                ('errors', apps.monitoring.sqlite_fields.SQLiteJSONField(default=list, verbose_name='Errors')),
                ('total_features', models.PositiveIntegerField(default=0, verbose_name='Total features')),
                ('synced_features', models.PositiveIntegerField(default=0, verbose_name='Synced features')),
                ('failed_features', models.PositiveIntegerField(default=0, verbose_name='Failed features')),
            ],
            options={
                'verbose_name': 'Feature Sync',
                'verbose_name_plural': 'Feature Syncs',
                'db_table': 'monitoring_feature_sync',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemHealthCheck',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('check_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Check ID')),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('warning', 'Warning'), ('critical', 'Critical'), ('unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Health Status')),
                ('checked_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Checked at')),
                ('database_status', models.BooleanField(default=False, verbose_name='Database OK')),
                ('cache_status', models.BooleanField(default=False, verbose_name='Cache OK')),
                ('disk_usage_percent', models.FloatField(blank=True, null=True, verbose_name='Disk usage %')),
                ('memory_usage_percent', models.FloatField(blank=True, null=True, verbose_name='Memory usage %')),
                ('cpu_usage_percent', models.FloatField(blank=True, null=True, verbose_name='CPU usage %')),
                ('detailed_report', apps.monitoring.sqlite_fields.SQLiteJSONField(default=dict, verbose_name='Detailed report')),
                ('recommendations', apps.monitoring.sqlite_fields.SQLiteJSONField(default=list, verbose_name='Recommendations')),
            ],
            options={
                'verbose_name': 'System Health Check',
                'verbose_name_plural': 'System Health Checks',
                'db_table': 'monitoring_system_health_check',
                'ordering': ['-checked_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('version_number', models.CharField(help_text='Semantic version (e.g., 1.0.0)', max_length=50, unique=True, verbose_name='Version number')),
                ('release_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Release date')),
                ('is_current', models.BooleanField(default=False, help_text='Only one version can be current at a time', verbose_name='Is current version')),
                ('features_enabled', apps.monitoring.sqlite_fields.SQLiteJSONField(default=dict, verbose_name='Enabled features')),
                ('features_disabled', apps.monitoring.sqlite_fields.SQLiteJSONField(default=dict, verbose_name='Disabled features')),
                ('release_notes', models.TextField(blank=True, help_text='What changed in this version', verbose_name='Release notes')),
            ],
            options={
                'verbose_name': 'System Version',
                'verbose_name_plural': 'System Versions',
                'db_table': 'monitoring_system_version',
                'ordering': ['-release_date'],
            },
        ),
    ]
